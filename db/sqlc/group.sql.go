// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    group_key
) VALUES (
    $1
) RETURNING group_key
`

func (q *Queries) CreateGroup(ctx context.Context, groupKey string) (string, error) {
	row := q.db.QueryRowContext(ctx, createGroup, groupKey)
	var group_key string
	err := row.Scan(&group_key)
	return group_key, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE group_key = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, groupKey string) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, groupKey)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT group_key FROM groups
WHERE group_key = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, groupKey string) (string, error) {
	row := q.db.QueryRowContext(ctx, getGroup, groupKey)
	var group_key string
	err := row.Scan(&group_key)
	return group_key, err
}
